{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "description",
    "max_voting_period",
    "name",
    "proposal_deposit",
    "threshold"
  ],
  "properties": {
    "description": {
      "type": "string"
    },
    "image_url": {
      "type": [
        "string",
        "null"
      ]
    },
    "max_voting_period": {
      "$ref": "#/definitions/Duration"
    },
    "name": {
      "type": "string"
    },
    "proposal_deposit": {
      "$ref": "#/definitions/Uint128"
    },
    "refund_failed_proposals": {
      "type": [
        "boolean",
        "null"
      ]
    },
    "threshold": {
      "$ref": "#/definitions/Threshold"
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Threshold": {
      "description": "This defines the different ways tallies can happen.\n\nThe total_weight used for calculating success as well as the weights of each individual voter used in tallying should be snapshotted at the beginning of the block at which the proposal starts (this is likely the responsibility of a correct cw4 implementation). See also `ThresholdResponse` in the cw3 spec.",
      "oneOf": [
        {
          "description": "Declares a percentage of the total weight that must cast Yes votes in order for a proposal to pass. See `ThresholdResponse.AbsolutePercentage` in the cw3 spec for details.",
          "type": "object",
          "required": [
            "absolute_percentage"
          ],
          "properties": {
            "absolute_percentage": {
              "type": "object",
              "required": [
                "percentage"
              ],
              "properties": {
                "percentage": {
                  "$ref": "#/definitions/Decimal"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Declares a `quorum` of the total votes that must participate in the election in order for the vote to be considered at all. See `ThresholdResponse.ThresholdQuorum` in the cw3 spec for details.",
          "type": "object",
          "required": [
            "threshold_quorum"
          ],
          "properties": {
            "threshold_quorum": {
              "type": "object",
              "required": [
                "quorum",
                "threshold"
              ],
              "properties": {
                "quorum": {
                  "$ref": "#/definitions/Decimal"
                },
                "threshold": {
                  "$ref": "#/definitions/Decimal"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
