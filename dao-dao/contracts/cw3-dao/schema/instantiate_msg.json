{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "description",
    "gov_token",
    "max_voting_period",
    "name",
    "proposal_deposit_amount",
    "threshold"
  ],
  "properties": {
    "description": {
      "type": "string"
    },
    "gov_token": {
      "description": "Set an existing governance token or launch a new one",
      "allOf": [
        {
          "$ref": "#/definitions/GovTokenMsg"
        }
      ]
    },
    "image_url": {
      "description": "Optional Image URL that is used by the contract",
      "type": [
        "string",
        "null"
      ]
    },
    "max_voting_period": {
      "description": "The amount of time a proposal can be voted on before expiring",
      "allOf": [
        {
          "$ref": "#/definitions/Duration"
        }
      ]
    },
    "name": {
      "type": "string"
    },
    "proposal_deposit_amount": {
      "description": "Deposit required to make a proposal",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "refund_failed_proposals": {
      "description": "Refund a proposal if it is rejected",
      "type": [
        "boolean",
        "null"
      ]
    },
    "threshold": {
      "description": "Voting params configuration",
      "allOf": [
        {
          "$ref": "#/definitions/Threshold"
        }
      ]
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EmbeddedLogo": {
      "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
      "oneOf": [
        {
          "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
          "type": "object",
          "required": [
            "svg"
          ],
          "properties": {
            "svg": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
          "type": "object",
          "required": [
            "png"
          ],
          "properties": {
            "png": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GovTokenInstantiateMsg": {
      "type": "object",
      "required": [
        "decimals",
        "initial_balances",
        "name",
        "symbol"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "initial_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cw20Coin"
          }
        },
        "marketing": {
          "anyOf": [
            {
              "$ref": "#/definitions/InstantiateMarketingInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "GovTokenMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "instantiate_new_cw20"
          ],
          "properties": {
            "instantiate_new_cw20": {
              "type": "object",
              "required": [
                "cw20_code_id",
                "label",
                "msg",
                "stake_contract_code_id"
              ],
              "properties": {
                "cw20_code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "initial_dao_balance": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "label": {
                  "type": "string"
                },
                "msg": {
                  "$ref": "#/definitions/GovTokenInstantiateMsg"
                },
                "stake_contract_code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "unstaking_duration": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Duration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Use an existing cw20 token",
          "type": "object",
          "required": [
            "use_existing_cw20"
          ],
          "properties": {
            "use_existing_cw20": {
              "type": "object",
              "required": [
                "addr",
                "label",
                "stake_contract_code_id"
              ],
              "properties": {
                "addr": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "stake_contract_code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "unstaking_duration": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Duration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InstantiateMarketingInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "logo": {
          "anyOf": [
            {
              "$ref": "#/definitions/Logo"
            },
            {
              "type": "null"
            }
          ]
        },
        "marketing": {
          "type": [
            "string",
            "null"
          ]
        },
        "project": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Logo": {
      "description": "This is used for uploading logo data, or setting it in InstantiateData",
      "oneOf": [
        {
          "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
          "type": "object",
          "required": [
            "embedded"
          ],
          "properties": {
            "embedded": {
              "$ref": "#/definitions/EmbeddedLogo"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Threshold": {
      "description": "This defines the different ways tallies can happen.\n\nThe total_weight used for calculating success as well as the weights of each individual voter used in tallying should be snapshotted at the beginning of the block at which the proposal starts (this is likely the responsibility of a correct cw4 implementation). See also `ThresholdResponse` in the cw3 spec.",
      "oneOf": [
        {
          "description": "Declares a percentage of the total weight that must cast Yes votes in order for a proposal to pass. See `ThresholdResponse.AbsolutePercentage` in the cw3 spec for details.",
          "type": "object",
          "required": [
            "absolute_percentage"
          ],
          "properties": {
            "absolute_percentage": {
              "type": "object",
              "required": [
                "percentage"
              ],
              "properties": {
                "percentage": {
                  "$ref": "#/definitions/Decimal"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Declares a `quorum` of the total votes that must participate in the election in order for the vote to be considered at all. See `ThresholdResponse.ThresholdQuorum` in the cw3 spec for details.",
          "type": "object",
          "required": [
            "threshold_quorum"
          ],
          "properties": {
            "threshold_quorum": {
              "type": "object",
              "required": [
                "quorum",
                "threshold"
              ],
              "properties": {
                "quorum": {
                  "$ref": "#/definitions/Decimal"
                },
                "threshold": {
                  "$ref": "#/definitions/Decimal"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
