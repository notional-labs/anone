// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: claims/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e66b4201e307400d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryParamsRequest.Unmarshal(m, b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return xxx_messageInfo_QueryParamsRequest.Size(m)
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params               Params   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e66b4201e307400d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryParamsResponse.Unmarshal(m, b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return xxx_messageInfo_QueryParamsResponse.Size(m)
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "notionallabs.anone.claims.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "notionallabs.anone.claims.QueryParamsResponse")
}

func init() { proto.RegisterFile("claims/query.proto", fileDescriptor_e66b4201e307400d) }

var fileDescriptor_e66b4201e307400d = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x09, 0x82, 0x0c, 0x66, 0x73, 0x3b, 0x40, 0x84, 0x04, 0x0d, 0x0b, 0x20, 0xc5, 0x4f,
	0x2d, 0x07, 0x40, 0xea, 0x09, 0xa0, 0x03, 0x03, 0xdb, 0x4b, 0x64, 0x99, 0x48, 0x89, 0x9f, 0x1b,
	0x3b, 0x88, 0xae, 0x1c, 0x01, 0x56, 0x0e, 0xc4, 0xce, 0xce, 0xc4, 0x41, 0x50, 0x6c, 0x83, 0x5a,
	0x21, 0x10, 0x9b, 0xf5, 0xfc, 0x7d, 0xbf, 0x7f, 0x3f, 0xc6, 0xab, 0x06, 0xeb, 0xd6, 0xc2, 0xb2,
	0x97, 0xdd, 0x4a, 0x98, 0x8e, 0x1c, 0xf1, 0x03, 0x4d, 0xae, 0x26, 0x8d, 0x4d, 0x83, 0xa5, 0x15,
	0xa8, 0x49, 0x4b, 0x11, 0xb0, 0x6c, 0xac, 0x48, 0x91, 0xa7, 0x60, 0x38, 0x05, 0x21, 0x3b, 0x54,
	0x44, 0xaa, 0x91, 0x80, 0xa6, 0x06, 0xd4, 0x9a, 0x1c, 0x0e, 0xbe, 0x8d, 0xb7, 0xe7, 0x15, 0xd9,
	0x96, 0x2c, 0x94, 0x68, 0x65, 0x78, 0x07, 0xee, 0xa7, 0xa5, 0x74, 0x38, 0x05, 0x83, 0xaa, 0xd6,
	0x1e, 0x8e, 0xec, 0x28, 0xd6, 0x31, 0xd8, 0x61, 0x1b, 0x03, 0xf2, 0x31, 0xe3, 0xd7, 0x83, 0x76,
	0xe5, 0x87, 0x0b, 0xb9, 0xec, 0xa5, 0x75, 0xf9, 0x0d, 0x1b, 0x6d, 0x4c, 0xad, 0x21, 0x6d, 0x25,
	0xbf, 0x64, 0x69, 0x90, 0xf7, 0x93, 0xe3, 0xe4, 0x74, 0x6f, 0x36, 0x11, 0xbf, 0xfe, 0x46, 0x04,
	0x75, 0xbe, 0xf3, 0xfa, 0x7e, 0xb4, 0xb5, 0x88, 0xda, 0xec, 0x25, 0x61, 0xbb, 0x3e, 0x98, 0x3f,
	0x25, 0x2c, 0x0d, 0x08, 0x2f, 0xfe, 0x48, 0xf9, 0xd9, 0x2d, 0x13, 0xff, 0xc5, 0x43, 0xe9, 0xfc,
	0xec, 0xf1, 0xed, 0xe3, 0x79, 0xfb, 0x84, 0x4f, 0x60, 0xdd, 0x03, 0xef, 0xc1, 0xc6, 0x4a, 0xe6,
	0x70, 0x5b, 0xa8, 0xda, 0xdd, 0xf5, 0xa5, 0xa8, 0xa8, 0xfd, 0xc6, 0x8b, 0x35, 0xfe, 0xe1, 0xcb,
	0x70, 0x2b, 0x23, 0x6d, 0x99, 0xfa, 0x25, 0x5e, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x80, 0x63,
	0xc4, 0x07, 0xea, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/notionallabs.anone.claims.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notionallabs.anone.claims.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notionallabs.anone.claims.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "claims/query.proto",
}
