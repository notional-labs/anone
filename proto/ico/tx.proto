syntax = "proto3";
package notionallabs.anone.ico;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/notional-labs/anone/x/ico/types";

// Msg defines the Msg service.
service Msg {
    rpc EnableICO(MessageEnableICORequest) returns (MessageEnableICOResponse);
    rpc AddDistributionToken(MessageAddDistributionTokenRequest) returns (MessageAddDistributionTokenResponse);
    rpc ModifyTokenListingPrice(MessageModifyTokenListingPriceRequest) returns (MessageModifyTokenListingPriceResponse);
    rpc CommitParticipation(MessageCommitParticipationRequest) returns (MessageCommitParticipationResponse);
}

// ====== MessageEnableICO
message MessageEnableICORequest {

    string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];

    // Project unique id of each project
    uint64 project_id = 2 [
        (gogoproto.moretags) = "yaml:\"project_id\""
    ];

    repeated cosmos.base.v1beta1.Coin token_for_distribution = 3 [
        (gogoproto.moretags) = "yaml:\"token_for_distribution\""
    ];

    string token_listing_price = 4 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.moretags) = "yaml:\"token_listing_price\""
    ];

}

message MessageEnableICOResponse {}

// ====== MessageAddDistributionToken

message MessageAddDistributionTokenRequest {
    
    string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];

    // Project unique id of each project
    uint64 project_id = 2 [
        (gogoproto.moretags) = "yaml:\"project_id\""
    ];

    repeated cosmos.base.v1beta1.Coin token_for_distribution = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"token_for_distribution\""
    ];
}

message MessageAddDistributionTokenResponse {}

// ====== MessageModifyTokenListingPrice

message MessageModifyTokenListingPriceRequest {

    string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];

    // Project unique id of each project
    uint64 project_id = 2 [
        (gogoproto.moretags) = "yaml:\"project_id\""
    ];

    string token_listing_price = 3 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.moretags) = "yaml:\"token_listing_price\"",
        (gogoproto.nullable) = false
    ];

}

message MessageModifyTokenListingPriceResponse {}

// ====== MessageCommitParticipation

message MessageCommitParticipationRequest {

    string participant = 1 [ (gogoproto.moretags) = "yaml:\"participant\"" ];

    repeated cosmos.base.v1beta1.Coin token_commit = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"token_commit\""
    ];

}

message MessageCommitParticipationResponse {}