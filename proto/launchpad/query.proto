syntax = "proto3";
package notionallabs.anone.launchpad;

import "launchpad/params.proto";
import "launchpad/project.proto";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/notional-labs/anone/x/launchpad/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nebula/launchpad/params";
  }

  rpc Project(ProjectRequest) returns (ProjectResponse) {
    option (google.api.http).get = "/nebula/launchpad/project/{project_id}";
  }

  rpc TotalProject(TotalProjectRequest) returns (TotalProjectResponse) {
    option (google.api.http).get = "/nebula/launchpad/projects";
  }

}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// ===================== Project

message ProjectRequest {
  uint64 project_id = 1 [
    (gogoproto.moretags) = "yaml:\"project_id\""
  ];
}

message ProjectResponse {
  Project project = 1[
    (gogoproto.moretags) = "yaml:\"project\""
  ];
}

// ===================== TotalProject

message TotalProjectRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message TotalProjectResponse {
  repeated Project projects = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}